<#
.SYNOPSIS
  Delete stale FSLogix profiles from Azure Files based on a report.

.DESCRIPTION
  Reads a CSV file generated from the stale profile identification script,
  and deletes the corresponding FSLogix VHDX files from Azure Files.

.NOTES
  - Run the identification script first.
  - Review the CSV before running this deletion script.
  - Use DryRun mode for a safe test run.
#>

# ===============================
# User Input Section
# ===============================
$StorageAccountName = "yourstorageaccount"
$ResourceGroupName  = "yourResourceGroup"
$FileShareName      = "profileshare"

# Path to the CSV report generated by the identification script
$InputCsvReport = "C:\Temp\StaleProfilesReport.csv"

# Where to save the deletion log
$OutputReport   = "C:\Temp\DeletedProfilesReport.csv"

# DryRun = only simulate deletions (set to $false to actually delete)
$DryRun = $true

# ===============================
# Connect to Azure
# ===============================
Write-Host "Connecting to Azure..." -ForegroundColor Cyan
Connect-AzAccount | Out-Null

# ===============================
# Get Storage Context
# ===============================
$key = (Get-AzStorageAccountKey -ResourceGroupName $ResourceGroupName -Name $StorageAccountName)[0].Value
$ctx = New-AzStorageContext -StorageAccountName $StorageAccountName -StorageAccountKey $key

# ===============================
# Read Input CSV
# ===============================
if (-not (Test-Path $InputCsvReport)) {
    Write-Host "CSV report not found at $InputCsvReport" -ForegroundColor Red
    exit
}

$staleProfiles = Import-Csv -Path $InputCsvReport
Write-Host "Loaded $($staleProfiles.Count) profiles from $InputCsvReport" -ForegroundColor Cyan

# ===============================
# Process Each Profile for Deletion
# ===============================
$deletedProfiles = @()

foreach ($profile in $staleProfiles) {
    # ProfileFile column should exist in the CSV
    $profileFile = $profile.ProfileFile
    $username    = $profile.UserName
    $lastMod     = $profile.LastModified
    $reason      = $profile.Reason

    Write-Host "Processing: $profileFile (User: $username)" -ForegroundColor Yellow

    if (-not $DryRun) {
        try {
            # Remove the file from Azure Files
            Remove-AzStorageFile -ShareName $FileShareName `
                                 -Path $profileFile `
                                 -Context $ctx -Force
            Write-Host "Deleted: $profileFile" -ForegroundColor Red
            $action = "Deleted"
        }
        catch {
            Write-Host "Error deleting $profileFile : $_" -ForegroundColor Red
            $action = "Error - $($_.Exception.Message)"
        }
    }
    else {
        Write-Host "DryRun: Skipping deletion of $profileFile" -ForegroundColor Cyan
        $action = "DryRun - Not Deleted"
    }

    # Log result
    $deletedProfiles += [PSCustomObject]@{
        ProfileFile   = $profileFile
        UserName      = $username
        LastModified  = $lastMod
        Reason        = $reason
        Action        = $action
        ProcessedOn   = (Get-Date).ToString("u")
    }
}

# ===============================
# Export Deletion Report
# ===============================
if ($deletedProfiles.Count -gt 0) {
    $deletedProfiles | Export-Csv -Path $OutputReport -NoTypeInformation -Force
    Write-Host "Deletion log saved to $OutputReport" -ForegroundColor Green
} else {
    Write-Host "No profiles were processed for deletion!" -ForegroundColor Green
}
